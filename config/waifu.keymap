//
// wiafu
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

// #define BASE 0
// #define SYM  1
// #define NAV  2
// #define ADJ  3
// #define TVP1 4
// #define TVP2 5

&mt {
    quick-tap-ms = <200>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <150>;
};

&lt {
    quick-tap-ms = <200>;
    require-prior-idle-ms = <100>;
    flavor = "tap-preferred";
    tapping-term-ms = <180>;
};

&sk { quick-release; };

/ {
    // combos {
    //     compatible = "zmk,combos";
    //
    //     combo_esc {
    //         timeout-ms = <50>;
    //         key-positions = <0 1>;
    //         bindings = <&kp ESC>;
    //     };
    //
    //     combo_tvp {
    //         timeout-ms = <100>;
    //         key-positions = <11 12 13>;
    //         bindings = <&tog TVP1>;
    //     };
    // };
    // macros {
    //     gif: gif {
    //         label = "giphy";
    //         compatible = "zmk,behavior-macro";
    //         #binding-cells = <0>;
    //         bindings
    //             = <&macro_press &kp LSHFT>
    //             , <&macro_tap &kp N2>
    //             , <&macro_release &kp LSHFT>
    //             , <&macro_tap &kp G &kp I &kp F>
    //             ;
    //     };
    // };
    // behavior-tap-hold {
    //     quick-tap-ms = <200>;   // Time threshold for quick taps
    //     hold-tap-delay-ms = <0>; // Delay before hold behavior activates (0 means instant hold)
    //     global-quick-tap; // Enables quick tap globally
    // };

    combos {
        compatible = "zmk,combos";

        // ar_ae {
        //     bindings = <&kp APOS>;
        //     key-positions = <10 11>;
        //     layers = <0>;
        //     timeout-ms = <25>;
        //     require-prior-idle-ms = <100>;
        // };
        //
        // oi_oe {
        //     bindings = <&kp SEMI>;
        //     key-positions = <19 18>;
        //     layers = <0>;
        //     timeout-ms = <20>;
        // };
        //
        // rs_sz {
        //     bindings = <&kp MINUS>;
        //     key-positions = <11 12>;
        //     layers = <0>;
        //     timeout-ms = <20>;
        // };
        //
        // uy_ue {
        //     bindings = <&kp LBKT>;
        //     key-positions = <7 8>;
        //     layers = <0>;
        //     timeout-ms = <25>;
        //     require-prior-idle-ms = <100>;
        // };
        //
        // fp_dollar {
        //     bindings = <&kp LS(N4)>;
        //     key-positions = <2 3>;
        //     timeout-ms = <20>;
        //     layers = <0>;
        // };
        //
        // nei_qmark {
        //     bindings = <&kp LS(MINUS)>;
        //     key-positions = <16 17 18>;
        //     timeout-ms = <40>;
        //     layers = <0>;
        // };
        //
        // c,._semi {
        //     bindings = <&kp LS(COMMA)>;
        //     key-positions = <29 28>;
        //     timeout-ms = <20>;
        //     layers = <0>;
        // };
        //
        // pb_quote {
        //     bindings = <&kp LS(N2)>;
        //     key-positions = <3 4>;
        //     timeout-ms = <50>;
        //     layers = <0>;
        // };
        //
        // wf_squote {
        //     bindings = <&kp LS(NUHS)>;
        //     key-positions = <1 2>;
        //     timeout-ms = <30>;
        //     layers = <0>;
        //     require-prior-idle-ms = <200>;
        // };
        //
        // xc_copy {
        //     bindings = <&kp LG(C)>;
        //     key-positions = <22 23>;
        //     timeout-ms = <20>;
        //     layers = <0>;
        // };
        //
        // cd_paste {
        //     bindings = <&kp LG(V)>;
        //     key-positions = <23 24>;
        //     timeout-ms = <20>;
        //     layers = <0>;
        // };
        //
        // st_sticky_sym {
        //     bindings = <&sl 2>;
        //     key-positions = <12 13>;
        //     timeout-ms = <20>;
        //     layers = <0>;
        // };
        //
        // ie_equals {
        //     bindings = <&kp LS(N0)>;
        //     key-positions = <17 18>;
        //     timeout-ms = <20>;
        //     layers = <0>;
        // };
        //
        // jl_circ {
        //     bindings = <&kp NON_US_BSLH>;
        //     key-positions = <5 6>;
        //     timeout-ms = <50>;
        //     layers = <0>;
        // };
        //
        // lu_slash {
        //     bindings = <&kp LS(N7)>;
        //     key-positions = <6 7>;
        //     timeout-ms = <30>;
        //     layers = <0>;
        //     require-prior-idle-ms = <150>;
        // };
        //
        // yz_qmark {
        //     bindings = <&kp LS(MINUS)>;
        //     key-positions = <8 9>;
        //     timeout-ms = <30>;
        //     layers = <0>;
        //     require-prior-idle-ms = <100>;
        // };
        //
        // colonx_asterisk {
        //     bindings = <&kp LS(RBKT)>;
        //     key-positions = <21 22>;
        //     layers = <0>;
        //     timeout-ms = <50>;
        // };
        //
        // h,_pound {
        //     bindings = <&kp NUHS>;
        //     key-positions = <27 28>;
        //     timeout-ms = <30>;
        //     require-prior-idle-ms = <200>;
        //     layers = <0>;
        // };
        //
        // ne_qmark {
        //     bindings = <&kp LS(MINUS)>;
        //     key-positions = <16 17>;
        //     timeout-ms = <20>;
        //     layers = <0>;
        // };
        //
        // at_ae {
        //     bindings = <&kp APOS>;
        //     key-positions = <10 13>;
        //     timeout-ms = <25>;
        //     require-prior-idle-ms = <100>;
        //     layers = <0>;
        // };
        //
        // no_oe {
        //     bindings = <&kp SEMI>;
        //     key-positions = <16 19>;
        //     timeout-ms = <25>;
        //     layers = <0>;
        // };
        //
        // rst_excl {
        //     bindings = <&kp LS(N1)>;
        //     key-positions = <11 12 13>;
        //     timeout-ms = <40>;
        //     layers = <0>;
        // };

        left_bootloader {
            bindings = <&bootloader>;
            key-positions = <31 32 33 34>;
        };

        right_bootloader {
            bindings = <&bootloader>;
            key-positions = <35 36 37 38>;
        };

        semicolon {
            bindings = <&kp LS(COMMA)>;
            key-positions = <37 38>;
        };

        equals {
            bindings = <&kp LS(N0)>;
            key-positions = <27 28>;
        };

        slash {
            bindings = <&kp LS(N7)>;
            key-positions = <16 17>;
        };

        qmark {
            bindings = <&kp LS(MINUS)>;
            key-positions = <27 26 28>;
            timeout-ms = <70>;
            layers = <0>;
        };

        pound {
            bindings = <&kp NUHS>;
            key-positions = <37 36>;
        };

        circumflex {
            bindings = <&kp NON_US_BSLH>;
            key-positions = <15 16>;
        };

        double_quote {
            bindings = <&kp LS(NUMBER_2)>;
            key-positions = <13 14>;
        };

        single_quote {
            bindings = <&kp LS(NUHS)>;
            key-positions = <11 12>;
        };

        dollar {
            bindings = <&kp LS(N4)>;
            key-positions = <12 13>;
        };

        exclamation {
            bindings = <&kp LS(NUMBER_1)>;
            key-positions = <21 22 23>;
        };

        arr_ptr {
            bindings = <&arr_ptr>;
            key-positions = <39 38>;
            layers = <0>;
        };
    };

    macros {
        arr_ptr: arr_ptr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "ARR_PTR";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        base_layer {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "BASE";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃     Q     ┃     W     ┃     F     ┃     P     ┃     B     ┃   ┃     J     ┃     L     ┃     U     ┃     Y     ┃     ;     ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃     A     ┃     R     ┃     S     ┃     T     ┃     G     ┃   ┃     M     ┃     N     ┃     E     ┃     I     ┃     O     ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃     Q     ┃     Z     ┃     X     ┃     C     ┃     D     ┃     V     ┃   ┃     K     ┃     H     ┃     ,     ┃     .     ┃     -     ┃     \     ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃    TAB    ┃    ESC    ┃    SPC    ┃   ┃   ENTER   ┃    BSPC   ┃    ESC    ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
&mt LGUI Q             &mt LEFT_ALT W  &mt LSHIFT F  &kp P        &kp B       &kp J           &kp L        &mt RSHFT U  &mt RALT Z  &mt RGUI Y
&mt LCTRL A            &mt LGUI R      &mt LALT S    &mt LSHFT T  &kp G       &kp M           &mt RSHFT N  &mt RALT E   &mt RGUI I  &mt RCTRL O
&mt LS(LCTRL) LS(DOT)  &kp X           &kp C         &kp D        &kp V       &kp K           &kp H        &kp COMMA    &kp DOT     &kp FSLH
&lt 3 TAB              &lt 1 SPACE     &kp ESCAPE    &kp RET      &lt 2 BSPC  &sk LEFT_SHIFT
            >;
        };

        sym {
            bindings = <
&kp LS(N1)    &kp LS(NUHS)   &kp LS(N4)  &kp LS(N2)  &kp LS(N5)  &kp LS(N6)  &kp LA(NUMBER_7)  &kp LS(N0)  &kp KP_SLASH  &kp LS(MINUS)
&kp RBKT      &kp GRAVE      &kp RA(N8)  &kp LS(N8)  &kp RA(N5)  &kp N0      &kp N1            &kp N2      &kp N3        &kp N4
&kp LS(RBKT)  &kp LS(GRAVE)  &kp RA(N9)  &kp LS(N9)  &kp RA(N6)  &kp N5      &kp N6            &kp N7      &kp N8        &kp N9
&trans        &trans         &trans      &trans      &mo 3       &trans
            >;
        };

        nav {
            bindings = <
&kp EQUAL      &kp LS(N3)  &kp C_VOL_UP  &kp HOME          &kp PG_UP  &kp LS(MINUS)  &kp NON_US_BSLH  &kp LBKT  &kp LS(LA(N7))  &kp LS(EQUAL)
&kp APOS       &kp MINUS   &kp C_MUTE    &kp END           &kp PG_DN  &none          &kp LEFT         &kp UP    &kp RIGHT       &kp SEMI
&kp C_PREV     &kp C_NEXT  &kp C_VOL_DN  &kp C_PLAY_PAUSE  &none      &none          &kp NUHS         &kp DOWN  &none           &trans
&kp LG(EQUAL)  &mo 3       &trans        &trans            &trans     &trans
            >;
        };

        adjust_layer {
            label = "ADJ";
            bindings = <
&kp LA(Q)     &kp LA(W)     &kp LA(F)     &none       &kp LG(LS(N4))  &kp F1  &kp F2   &kp F3   &kp F4   &bt BT_CLR
&kp LA(N4)    &kp LA(N3)    &kp LA(N2)    &kp LA(N1)  &none           &kp F5  &kp F6   &kp F7   &kp F8   &out OUT_BLE
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &kp LA(D)   &kp LA(V)       &kp F9  &kp F10  &kp F11  &kp F12  &out OUT_USB
&trans        &trans        &trans        &trans      &kp DELETE      &trans
            >;
        };
    };
};
